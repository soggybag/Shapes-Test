//
//  StarKit.swift
//  ProjectName
//
//  Created by Mitchell Hudson on 6/5/16.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StarKit : NSObject {

    //// Cache

    private struct Cache {
        static let fillColor: UIColor = UIColor(red: 1.000, green: 0.359, blue: 0.359, alpha: 1.000)
        static let strokeColor: UIColor = UIColor(red: 0.596, green: 0.289, blue: 0.289, alpha: 1.000)
        static let strokeColor2: UIColor = UIColor(red: 0.376, green: 0.233, blue: 0.152, alpha: 1.000)
        static var image0: UIImage?
        static var image1: UIImage?
        static var image2: UIImage?
        static var image3: UIImage?
        static var image4: UIImage?
        static var image5: UIImage?
        static var image6: UIImage?
        static var image7: UIImage?
        static var image8: UIImage?
        static var image9: UIImage?
        static var image10: UIImage?
        static var image11: UIImage?
        static var image12: UIImage?
        static var image13: UIImage?
        static var image14: UIImage?
        static var image15: UIImage?
        static var image16: UIImage?
        static var image17: UIImage?
        static var image18: UIImage?
        static var image19: UIImage?
        static var image20: UIImage?
        static var image21: UIImage?
        static var image22: UIImage?
        static var image23: UIImage?
        static var image24: UIImage?
        static var image25: UIImage?

        static var imageOfStar: UIImage?
        static var starTargets: [AnyObject]?
    }

    //// Colors

    public class var fillColor: UIColor { return Cache.fillColor }
    public class var strokeColor: UIColor { return Cache.strokeColor }
    public class var strokeColor2: UIColor { return Cache.strokeColor2 }

    //// Images

    public class var image0: UIImage {
        if Cache.image0 == nil {
            Cache.image0 = UIImage(named: "image0.png")!
        }
        return Cache.image0!
    }

    public class var image1: UIImage {
        if Cache.image1 == nil {
            Cache.image1 = UIImage(named: "image1.png")!
        }
        return Cache.image1!
    }

    public class var image2: UIImage {
        if Cache.image2 == nil {
            Cache.image2 = UIImage(named: "image2.png")!
        }
        return Cache.image2!
    }

    public class var image3: UIImage {
        if Cache.image3 == nil {
            Cache.image3 = UIImage(named: "image3.png")!
        }
        return Cache.image3!
    }

    public class var image4: UIImage {
        if Cache.image4 == nil {
            Cache.image4 = UIImage(named: "image4.png")!
        }
        return Cache.image4!
    }

    public class var image5: UIImage {
        if Cache.image5 == nil {
            Cache.image5 = UIImage(named: "image5.png")!
        }
        return Cache.image5!
    }

    public class var image6: UIImage {
        if Cache.image6 == nil {
            Cache.image6 = UIImage(named: "image6.png")!
        }
        return Cache.image6!
    }

    public class var image7: UIImage {
        if Cache.image7 == nil {
            Cache.image7 = UIImage(named: "image7.png")!
        }
        return Cache.image7!
    }

    public class var image8: UIImage {
        if Cache.image8 == nil {
            Cache.image8 = UIImage(named: "image8.png")!
        }
        return Cache.image8!
    }

    public class var image9: UIImage {
        if Cache.image9 == nil {
            Cache.image9 = UIImage(named: "image9.jpg")!
        }
        return Cache.image9!
    }

    public class var image10: UIImage {
        if Cache.image10 == nil {
            Cache.image10 = UIImage(named: "image10.png")!
        }
        return Cache.image10!
    }

    public class var image11: UIImage {
        if Cache.image11 == nil {
            Cache.image11 = UIImage(named: "image11.png")!
        }
        return Cache.image11!
    }

    public class var image12: UIImage {
        if Cache.image12 == nil {
            Cache.image12 = UIImage(named: "image12.png")!
        }
        return Cache.image12!
    }

    public class var image13: UIImage {
        if Cache.image13 == nil {
            Cache.image13 = UIImage(named: "image13.jpg")!
        }
        return Cache.image13!
    }

    public class var image14: UIImage {
        if Cache.image14 == nil {
            Cache.image14 = UIImage(named: "image14.png")!
        }
        return Cache.image14!
    }

    public class var image15: UIImage {
        if Cache.image15 == nil {
            Cache.image15 = UIImage(named: "image15.jpg")!
        }
        return Cache.image15!
    }

    public class var image16: UIImage {
        if Cache.image16 == nil {
            Cache.image16 = UIImage(named: "image16.png")!
        }
        return Cache.image16!
    }

    public class var image17: UIImage {
        if Cache.image17 == nil {
            Cache.image17 = UIImage(named: "image17.png")!
        }
        return Cache.image17!
    }

    public class var image18: UIImage {
        if Cache.image18 == nil {
            Cache.image18 = UIImage(named: "image18.png")!
        }
        return Cache.image18!
    }

    public class var image19: UIImage {
        if Cache.image19 == nil {
            Cache.image19 = UIImage(named: "image19.png")!
        }
        return Cache.image19!
    }

    public class var image20: UIImage {
        if Cache.image20 == nil {
            Cache.image20 = UIImage(named: "image20.png")!
        }
        return Cache.image20!
    }

    public class var image21: UIImage {
        if Cache.image21 == nil {
            Cache.image21 = UIImage(named: "image21.png")!
        }
        return Cache.image21!
    }

    public class var image22: UIImage {
        if Cache.image22 == nil {
            Cache.image22 = UIImage(named: "image22.png")!
        }
        return Cache.image22!
    }

    public class var image23: UIImage {
        if Cache.image23 == nil {
            Cache.image23 = UIImage(named: "image23.png")!
        }
        return Cache.image23!
    }

    public class var image24: UIImage {
        if Cache.image24 == nil {
            Cache.image24 = UIImage(named: "image24.png")!
        }
        return Cache.image24!
    }

    public class var image25: UIImage {
        if Cache.image25 == nil {
            Cache.image25 = UIImage(named: "image25.png")!
        }
        return Cache.image25!
    }

    //// Drawing Methods
    
    public class func getStarPath() -> UIBezierPath {
        let starShapePath = UIBezierPath()
        starShapePath.moveToPoint(CGPoint(x: -0.5, y: 42.5))
        starShapePath.addLineToPoint(CGPoint(x: 11.55, y: 16.09))
        starShapePath.addLineToPoint(CGPoint(x: 40.4, y: 12.79))
        starShapePath.addLineToPoint(CGPoint(x: 19, y: -6.84))
        starShapePath.addLineToPoint(CGPoint(x: 24.77, y: -35.29))
        starShapePath.addLineToPoint(CGPoint(x: -0.5, y: -21.01))
        starShapePath.addLineToPoint(CGPoint(x: -25.77, y: -35.29))
        starShapePath.addLineToPoint(CGPoint(x: -20, y: -6.84))
        starShapePath.addLineToPoint(CGPoint(x: -41.4, y: 12.79))
        starShapePath.addLineToPoint(CGPoint(x: -12.55, y: 16.09))
        starShapePath.closePath()
        return starShapePath
    }

    public class func drawStar() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// StarShape Drawing
        let starShapePath = StarKit.getStarPath()
        CGContextSaveGState(context)
        starShapePath.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: -43, y: -243), size: StarKit.image0.size), StarKit.image0.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor.setStroke()
        starShapePath.lineWidth = 3
        starShapePath.stroke()
    }

    public class func drawBox() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 2.5, y: 2.5, width: 60, height: 60))
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 3, y: -223), size: StarKit.image0.size), StarKit.image0.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor.setStroke()
        rectanglePath.lineWidth = 3
        rectanglePath.stroke()
    }

    public class func drawPlatform2() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 72, y: 107.65))
        bezier3Path.addCurveToPoint(CGPoint(x: 105.91, y: 83.65), controlPoint1: CGPoint(x: 72, y: 98.76), controlPoint2: CGPoint(x: 77.69, y: 87.74))
        bezier3Path.addCurveToPoint(CGPoint(x: 135.33, y: 35.15), controlPoint1: CGPoint(x: 125.97, y: 80.74), controlPoint2: CGPoint(x: 135.33, y: 61.79))
        bezier3Path.addCurveToPoint(CGPoint(x: 165.09, y: 83.65), controlPoint1: CGPoint(x: 135.67, y: 61.79), controlPoint2: CGPoint(x: 145.03, y: 80.74))
        bezier3Path.addCurveToPoint(CGPoint(x: 199, y: 107.65), controlPoint1: CGPoint(x: 193.31, y: 87.74), controlPoint2: CGPoint(x: 199, y: 98.76))
        bezier3Path.addLineToPoint(CGPoint(x: 72, y: 107.65))
        bezier3Path.closePath()
        CGContextSaveGState(context)
        bezier3Path.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 72, y: -65), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        bezier3Path.lineWidth = 3
        bezier3Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 63.5, y: 102.5, width: 144, height: 8), byRoundingCorners: [UIRectCorner.BottomLeft, UIRectCorner.BottomRight], cornerRadii: CGSize(width: 4, height: 4))
        rectangle3Path.closePath()
        CGContextSaveGState(context)
        rectangle3Path.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 64, y: -62), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        rectangle3Path.lineWidth = 3
        rectangle3Path.stroke()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 34.5, y: 110.5, width: 202, height: 11), byRoundingCorners: [UIRectCorner.BottomLeft, UIRectCorner.BottomRight], cornerRadii: CGSize(width: 5.5, height: 5.5))
        rectangle2Path.closePath()
        CGContextSaveGState(context)
        rectangle2Path.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 35, y: -51), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        rectangle2Path.lineWidth = 3
        rectangle2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 20.5, y: 119.5, width: 230, height: 19), byRoundingCorners: [UIRectCorner.BottomLeft, UIRectCorner.BottomRight], cornerRadii: CGSize(width: 9.5, height: 9.5))
        rectanglePath.closePath()
        CGContextSaveGState(context)
        rectanglePath.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 21, y: -34), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        rectanglePath.lineWidth = 3
        rectanglePath.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 117.5, y: 53.5, width: 35, height: 11), cornerRadius: 5.5)
        CGContextSaveGState(context)
        rectangle4Path.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 118, y: -108), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        rectangle4Path.lineWidth = 3
        rectangle4Path.stroke()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 119.5, y: 39.5, width: 31, height: 9), cornerRadius: 4.5)
        CGContextSaveGState(context)
        rectangle5Path.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 120, y: -124), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        rectangle5Path.lineWidth = 3
        rectangle5Path.stroke()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 129.5, y: 22.5, width: 12, height: 12))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 130, y: -138), size: StarKit.image1.size), StarKit.image1.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        ovalPath.lineWidth = 3
        ovalPath.stroke()
    }

    public class func drawL() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 53, y: 53))
        bezierPath.addCurveToPoint(CGPoint(x: 53, y: 33), controlPoint1: CGPoint(x: 53, y: 53), controlPoint2: CGPoint(x: 53, y: 33))
        bezierPath.addLineToPoint(CGPoint(x: 23, y: 33))
        bezierPath.addCurveToPoint(CGPoint(x: 23, y: 3), controlPoint1: CGPoint(x: 23, y: 19.08), controlPoint2: CGPoint(x: 23, y: 3))
        bezierPath.addLineToPoint(CGPoint(x: 3, y: 3))
        bezierPath.addCurveToPoint(CGPoint(x: 3, y: 33), controlPoint1: CGPoint(x: 3, y: 3), controlPoint2: CGPoint(x: 3, y: 19.08))
        bezierPath.addLineToPoint(CGPoint(x: 3, y: 53))
        bezierPath.addLineToPoint(CGPoint(x: 53, y: 53))
        bezierPath.addLineToPoint(CGPoint(x: 53, y: 53))
        bezierPath.closePath()
        CGContextSaveGState(context)
        bezierPath.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 3, y: -233), size: StarKit.image0.size), StarKit.image0.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    public class func drawCircle() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 3, y: 3, width: 60, height: 60))
        CGContextSaveGState(context)
        ovalPath.addClip()
        CGContextDrawTiledImage(context, CGRect(origin: CGPoint(x: 3, y: -223), size: StarKit.image0.size), StarKit.image0.CGImage)
        CGContextRestoreGState(context)
        StarKit.strokeColor2.setStroke()
        ovalPath.lineWidth = 3
        ovalPath.stroke()
    }

    //// Generated Images

    public class var imageOfStar: UIImage {
        if Cache.imageOfStar != nil {
            return Cache.imageOfStar!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 113, height: 107), false, 0)
        let context = UIGraphicsGetCurrentContext()
        CGContextTranslateCTM(context, 57, 52)
            StarKit.drawStar()

        Cache.imageOfStar = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfStar!
    }

    //// Customization Infrastructure

    @IBOutlet var starTargets: [AnyObject]! {
        get { return Cache.starTargets }
        set {
            Cache.starTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StarKit.imageOfStar)
            }
        }
    }

}
